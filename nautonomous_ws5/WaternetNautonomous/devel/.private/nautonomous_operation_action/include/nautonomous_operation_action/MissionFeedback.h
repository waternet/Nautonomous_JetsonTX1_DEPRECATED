// Generated by gencpp from file nautonomous_operation_action/MissionFeedback.msg
// DO NOT EDIT!


#ifndef NAUTONOMOUS_OPERATION_ACTION_MESSAGE_MISSIONFEEDBACK_H
#define NAUTONOMOUS_OPERATION_ACTION_MESSAGE_MISSIONFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nautonomous_operation_action/Status.h>

namespace nautonomous_operation_action
{
template <class ContainerAllocator>
struct MissionFeedback_
{
  typedef MissionFeedback_<ContainerAllocator> Type;

  MissionFeedback_()
    : feedback()  {
    }
  MissionFeedback_(const ContainerAllocator& _alloc)
    : feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::nautonomous_operation_action::Status_<ContainerAllocator>  _feedback_type;
  _feedback_type feedback;




  typedef boost::shared_ptr< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MissionFeedback_

typedef ::nautonomous_operation_action::MissionFeedback_<std::allocator<void> > MissionFeedback;

typedef boost::shared_ptr< ::nautonomous_operation_action::MissionFeedback > MissionFeedbackPtr;
typedef boost::shared_ptr< ::nautonomous_operation_action::MissionFeedback const> MissionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nautonomous_operation_action

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nautonomous_operation_action': ['/home/ubuntu/ROS/nautonomous_ws5/WaternetNautonomous/src/nautonomous_operation_action/msg', '/home/ubuntu/ROS/nautonomous_ws5/WaternetNautonomous/devel/.private/nautonomous_operation_action/share/nautonomous_operation_action/msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59b58f1aa7185168e47b9f459f428f83";
  }

  static const char* value(const ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59b58f1aa7185168ULL;
  static const uint64_t static_value2 = 0xe47b9f459f428f83ULL;
};

template<class ContainerAllocator>
struct DataType< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nautonomous_operation_action/MissionFeedback";
  }

  static const char* value(const ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback\n\
nautonomous_operation_action/Status feedback\n\
\n\
================================================================================\n\
MSG: nautonomous_operation_action/Status\n\
int32 progression\n\
string status\n\
";
  }

  static const char* value(const ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MissionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nautonomous_operation_action::MissionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback: ";
    s << std::endl;
    Printer< ::nautonomous_operation_action::Status_<ContainerAllocator> >::stream(s, indent + "  ", v.feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAUTONOMOUS_OPERATION_ACTION_MESSAGE_MISSIONFEEDBACK_H
